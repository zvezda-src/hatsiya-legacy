diff -r -u --new-file a/snmp.hpp b/snmp.hpp
--- a/snmp.hpp	2022-09-04 18:07:13.204543999 +0300
+++ b/snmp.hpp	2022-09-04 18:07:13.212543922 +0300
@@ -1,5 +1,6 @@
 #pragma once
 
+#include <string>
 #include "snmp_notification.hpp"
 
 namespace phosphor
@@ -21,6 +22,19 @@
     obj.sendTrap();
 }
 
+/* @brief sends the trap to the selected server
+ * T - Notification type
+ * @param[in] peername - perrname of server <server>:<port>
+ * @param[in] tArgs - arguments for the trap.
+ */
+
+template <typename T, typename... ArgTypes>
+void sendTrapToServer(std::string peername, ArgTypes&&... tArgs)
+{
+    T obj(std::forward<ArgTypes>(tArgs)...);
+    obj.sendTrapToServer(peername);
+}
+
 } // namespace snmp
 } // namespace network
 } // namespace phosphor
diff -r -u --new-file a/snmp_notification.cpp b/snmp_notification.cpp
--- a/snmp_notification.cpp	2022-09-04 18:07:13.204543999 +0300
+++ b/snmp_notification.cpp	2022-09-04 18:07:13.212543922 +0300
@@ -57,10 +57,9 @@
     return (varList == nullptr ? false : true);
 }
 
-void Notification::sendTrap()
+void Notification::initSession( netsnmp_session &session )
 {
     constexpr auto comm = "public";
-    netsnmp_session session{};
     snmp_sess_init(&session);
 
     init_snmp("snmpapp");
@@ -71,88 +70,108 @@
     session.community_len = strlen(comm);
     session.callback = nullptr;
     session.callback_magic = nullptr;
+}
 
-    auto mgrs = getManagers();
-
-    for (auto& mgr : mgrs)
-    {
-        session.peername = const_cast<char*>(mgr.c_str());
-        // create the session
-        auto ss = snmp_add(
+void Notification::sendTrapInternal( netsnmp_session &session, const std::string &peername )
+{
+    session.peername = const_cast<char*>(peername.c_str());
+    // create the session
+    auto ss = snmp_add(
             &session,
             netsnmp_transport_open_client("snmptrap", session.peername),
             nullptr, nullptr);
-        if (!ss)
-        {
-            log<level::ERR>("Unable to get the snmp session.",
-                            entry("SNMPMANAGER=%s", mgr.c_str()));
-            elog<InternalFailure>();
-        }
+    if (!ss)
+    {
+        log<level::ERR>("Unable to get the snmp session.",
+                       entry("SNMPMANAGER=%s", peername.c_str()));
+        elog<InternalFailure>();
+    }
 
-        // Wrap the raw pointer in RAII
-        snmpSessionPtr sessionPtr(ss, &::snmp_close);
+    // Wrap the raw pointer in RAII
+    snmpSessionPtr sessionPtr(ss, &::snmp_close);
 
-        ss = nullptr;
+    ss = nullptr;
 
-        auto pdu = snmp_pdu_create(SNMP_MSG_TRAP2);
-        if (!pdu)
-        {
-            log<level::ERR>("Failed to create notification PDU");
-            elog<InternalFailure>();
-        }
+    auto pdu = snmp_pdu_create(SNMP_MSG_TRAP2);
+    if (!pdu)
+    {
+        log<level::ERR>("Failed to create notification PDU");
+        elog<InternalFailure>();
+    }
 
-        // https://tools.ietf.org/search/rfc3416#page-22
-        // add the sysUpTime.0 [RFC3418]
-        auto sysuptime = get_uptime();
-        std::string sysuptimeStr = std::to_string(sysuptime);
+    // https://tools.ietf.org/search/rfc3416#page-22
+    // add the sysUpTime.0 [RFC3418]
+    auto sysuptime = get_uptime();
+    std::string sysuptimeStr = std::to_string(sysuptime);
 
-        if (snmp_add_var(pdu, sysuptimeOID, sizeof(sysuptimeOID) / sizeof(oid),
-                         't', sysuptimeStr.c_str()))
+    if (snmp_add_var(pdu, sysuptimeOID, sizeof(sysuptimeOID) / sizeof(oid),
+                     't', sysuptimeStr.c_str()))
 
-        {
-            log<level::ERR>("Failed to add the SNMP var(systime)");
-            snmp_free_pdu(pdu);
-            elog<InternalFailure>();
-        }
+    {
+        log<level::ERR>("Failed to add the SNMP var(systime)");
+        snmp_free_pdu(pdu);
+        elog<InternalFailure>();
+    }
 
-        pdu->trap_type = SNMP_TRAP_ENTERPRISESPECIFIC;
+    pdu->trap_type = SNMP_TRAP_ENTERPRISESPECIFIC;
 
-        auto trapInfo = getTrapOID();
+    auto trapInfo = getTrapOID();
 
-        // add the snmpTrapOID.0 [RFC3418]
-        if (!snmp_pdu_add_variable(pdu, SNMPTrapOID,
-                                   sizeof(SNMPTrapOID) / sizeof(oid),
-                                   ASN_OBJECT_ID, trapInfo.first.data(),
-                                   trapInfo.second * sizeof(oid)))
+    // add the snmpTrapOID.0 [RFC3418]
+    if (!snmp_pdu_add_variable(pdu, SNMPTrapOID,
+                               sizeof(SNMPTrapOID) / sizeof(oid),
+                               ASN_OBJECT_ID, trapInfo.first.data(),
+                               trapInfo.second * sizeof(oid)))
+    {
+        log<level::ERR>("Failed to add the SNMP var(trapID)");
+        snmp_free_pdu(pdu);
+        elog<InternalFailure>();
+    }
+
+    auto objectList = getFieldOIDList();
+
+    for (const auto& object : objectList)
+    {
+        if (!addPDUVar(*pdu, std::get<0>(object), std::get<1>(object),
+                       std::get<2>(object), std::get<3>(object)))
         {
-            log<level::ERR>("Failed to add the SNMP var(trapID)");
+            log<level::ERR>("Failed to add the SNMP var");
             snmp_free_pdu(pdu);
             elog<InternalFailure>();
         }
+    }
+    // pdu is freed by snmp_send
+    if (!snmp_send(sessionPtr.get(), pdu))
+    {
+        log<level::ERR>("Failed to send the snmp trap.");
+        elog<InternalFailure>();
+    }
 
-        auto objectList = getFieldOIDList();
+    log<level::DEBUG>("Sent SNMP Trap", entry("MGR=%s", peername.c_str()));
+}
 
-        for (const auto& object : objectList)
-        {
-            if (!addPDUVar(*pdu, std::get<0>(object), std::get<1>(object),
-                           std::get<2>(object), std::get<3>(object)))
-            {
-                log<level::ERR>("Failed to add the SNMP var");
-                snmp_free_pdu(pdu);
-                elog<InternalFailure>();
-            }
-        }
-        // pdu is freed by snmp_send
-        if (!snmp_send(sessionPtr.get(), pdu))
-        {
-            log<level::ERR>("Failed to send the snmp trap.");
-            elog<InternalFailure>();
-        }
 
-        log<level::DEBUG>("Sent SNMP Trap", entry("MGR=%s", mgr.c_str()));
+void Notification::sendTrap()
+{
+    netsnmp_session session{};
+    initSession( session );
+
+    auto mgrs = getManagers();
+
+    for (auto& mgr : mgrs)
+    {
+        sendTrapInternal( session, mgr );
     }
 }
 
+void Notification::sendTrapToServer( const std::string &peername )
+{
+    netsnmp_session session{};
+    initSession( session );
+
+    sendTrapInternal( session, peername );
+}
+
 } // namespace snmp
 } // namespace network
 } // namespace phosphor
diff -r -u --new-file a/snmp_notification.hpp b/snmp_notification.hpp
--- a/snmp_notification.hpp	2022-09-04 18:07:13.208543961 +0300
+++ b/snmp_notification.hpp	2022-09-04 18:07:13.212543922 +0300
@@ -115,6 +115,11 @@
      */
     void sendTrap();
 
+    /** @brief Send the snmp trap to the selected
+     *          server.
+     */
+    void sendTrapToServer( const std::string &peername );
+
   protected:
     /** @brief Add the variable in the snmp pdu object.
      *  @param[in] pdu - SNMP pdu object.
@@ -139,6 +144,9 @@
      *         this notification.
      */
     virtual std::vector<Object> getFieldOIDList() = 0;
+
+    void initSession( netsnmp_session &session );
+    void sendTrapInternal( netsnmp_session &session, const std::string &peername );
 };
 
 class TestErrorNotification;
