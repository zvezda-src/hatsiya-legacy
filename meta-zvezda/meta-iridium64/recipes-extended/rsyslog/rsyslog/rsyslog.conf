# if you experience problems, check
# http://www.rsyslog.com/troubleshoot for assistance

# rsyslog v3: load input modules
# If you do not load inputs, nothing happens!
# You may need to set the module load path if modules are not found.
#
# Ported from debian's sysklogd.conf

# Journal-style logging
# Limit to no more than 2000 entries in one minute and enable the
# journal workaround to avoid duplicate entries
module(load="imjournal" StateFile="/var/log/state"
                        RateLimit.Interval="60"
                        RateLimit.Burst="2000")

# Template for IPMI SEL messages
# "<timestamp> <ID>,<Type>,<EventData>,[<Generator ID>,<Path>,<Direction>]"
template(name="IPMISELTemplate" type="list") {
    property(name="timereported" dateFormat="rfc3339")
    constant(value=" ")
    property(name="$!IPMI_SEL_RECORD_ID")
    constant(value=",")
    property(name="$!IPMI_SEL_RECORD_TYPE")
    constant(value=",")
    property(name="$!IPMI_SEL_DATA")
    constant(value=",")
    property(name="$!IPMI_SEL_GENERATOR_ID")
    constant(value=",")
    property(name="$!IPMI_SEL_SENSOR_PATH")
    constant(value=",")
    property(name="$!IPMI_SEL_EVENT_DIR")
    constant(value="\n")
}

# Template for Redfish messages
# "<timestamp> <MessageId>,<MessageArgs>"
template(name="RedfishTemplate" type="list") {
    property(name="timereported" dateFormat="rfc3339")
    constant(value=" ")
    property(name="$!REDFISH_MESSAGE_ID")
    constant(value=",")
    property(name="$!REDFISH_MESSAGE_ARGS")
    constant(value="\n")
}

# Template for Application Crashes
# "<timestamp> <MessageId>,<MessageArgs>"
template(name="CrashTemplate" type="list") {
    property(name="timereported" dateFormat="rfc3339")
    constant(value=" ")
    constant(value="OpenBMC.0.1.ServiceFailure")
    constant(value=",")
    property(name="$!UNIT")
    constant(value="\n")
}

# Template for Application phosphor-logging-test
# "<timestamp> <MessageId>,<MessageArgs>"
template(name="LoggingTestTemplate" type="list") {
    property(name="timereported" dateFormat="rfc3339")
    constant(value=" ")
# This format of message (like printf)
# We can select type from (or add to this own type)
# https://github.com/openbmc/bmcweb/blob/master/redfish-core/include/registries/openbmc_message_registry.hpp
#    constant(value="OpenBMC.0.1.ServiceFailure")
#    constant(value="OpenBMC.0.1.InventoryAdded")
#    constant(value=",")
    property(name="$!MESSAGE")
    constant(value="\n")
}

# Template for Services (_SYSTEMD_UNIT must be defined)
# "<timestamp> <MessageId>,<MessageArgs>"
template(name="SystemdUnitCriticalTemplate" type="list") {
    property(name="timereported" dateFormat="rfc3339")
    constant(value=" ")
    constant(value="OpenBMC.0.1.SystedUnitMessageCritical")
    constant(value=",")
    property(name="$!_SYSTEMD_UNIT")
    constant(value=",")
    property(name="$!MESSAGE")
    constant(value="\n")
}

# Template for Services (_SYSTEMD_UNIT must be defined)
# "<timestamp> <MessageId>,<MessageArgs>"
template(name="SystemdUnitWarningTemplate" type="list") {
    property(name="timereported" dateFormat="rfc3339")
    constant(value=" ")
    constant(value="OpenBMC.0.1.SystedUnitMessageWarning")
    constant(value=",")
    property(name="$!_SYSTEMD_UNIT")
    constant(value=",")
    property(name="$!MESSAGE")
    constant(value="\n")
}

# Template for Services (_SYSTEMD_UNIT must be defined)
# "<timestamp> <MessageId>,<MessageArgs>"
template(name="SystemdUnitInfoTemplate" type="list") {
    property(name="timereported" dateFormat="rfc3339")
    constant(value=" ")
    constant(value="OpenBMC.0.1.SystedUnitMessageInfo")
    constant(value=",")
    property(name="$!_SYSTEMD_UNIT")
    constant(value=",")
    property(name="$!MESSAGE")
    constant(value="\n")
}

# BAD template (name="redfish_id" type="string" string="/var/log/redfish_%MSGID%")
# BAD template (name="redfish_id" type="string" string="/var/log/redfish_$!_SOURCE_REALTIME_TIMESTAMP")
# OK template (name="redfish_id" type="string" string="/var/log/redfish_%HOSTNAME%")
# OK template (name="redfish_id" type="string" string="/var/log/redfish_%timestamp%")
# OK template (name="redfish_id" type="string" string="/var/log/redfish_%timegenerated%")
# OK!!!! template (name="redfish_id" type="string" string="/var/log/redfish_%timegenerated:::date-rfc3339%")

# If the journal entry has the IPMI SEL MESSAGE_ID, save as IPMI SEL
# The MESSAGE_ID string is generated using journalctl and must match the
# MESSAGE_ID used in IPMI to correctly find the SEL entries.
if ($!MESSAGE_ID == "b370836ccf2f4850ac5bee185b77893a") then {
   action(type="omfile" file="/var/log/ipmi_sel" template="IPMISELTemplate")
}

# If the journal entry has a Redfish MessageId, save as a Redfish event
if ($!REDFISH_MESSAGE_ID != "") then {
   action(type="omfile" file="/var/log/redfish" template="RedfishTemplate")
}

## If the journal entry has a Exit Code, save as a Redfish event
#if ($!EXIT_STATUS != "" and $!EXIT_STATUS != "0") then {
#   action(type="omfile" file="/var/log/redfish" template="CrashTemplate")
#}

# If the journal entry has a _COMM="logging_test", save as a LoggingTest event
#if ($!_COMM == "logging-test") then {
#   action(type="omfile" file="/var/log/redfish" template="LoggingTestTemplate")
#}

# enable UDP remote log
#*.* @192.168.12.123:514

# enable TCP remote log
#*.* @@10.0.2.2:514

# OK if ($!FOR_REMOTE_SERVER == "OK" ) then {
# if ($!FOR_REMOTE_SERVER == "OK" and ( $!PRIORITY == "0" or $!PRIORITY == "1" or $!PRIORITY == "2" ) ) then {
# OK if ($!FOR_REMOTE_SERVER == "OK" and ( $!PRIORITY == "3" or $!PRIORITY == "4" )  ) then {
# OK if ($!FOR_REMOTE_SERVER == "OK" and ( $!PRIORITY == "3" or $!PRIORITY == "4" ) and $!MESSAGE contains "serial number" ) then {
# BAD if ($!FOR_REMOTE_SERVER == "OK" and ( $!PRIORITY == "3" or $!PRIORITY == "4" ) and $!MESSAGE contains "serial number cvxvx" ) then {
# OK if ($!FOR_REMOTE_SERVER != "" and ( $!PRIORITY == "3" or $!PRIORITY == "4" ) and $!MESSAGE contains "serial number" ) then {
#  action(type="omfwd"
##      queue.type="linkedlist"
##      queue.filename="example_fwd"
##      action.resumeRetryCount="-1"
##      queue.saveOnShutdown="on"
#      target="10.0.2.2" port="514" protocol="tcp"
#     )
#}

# === remote conf start ===
# === remote conf end ===

if ($!FOR_REMOTE_SERVER != "") then {
   stop
}

if ($!_SYSTEMD_UNIT == "phosphor-ipmi-host.service") then {
   stop
}

#if ($!_EXE == "/usr/bin/bmcweb") then {
#   stop
#}

# If the journal entry has a _SYSTEMD_UNIT!="" and not redfish, save as a LoggingTest event
if ($!_SYSTEMD_UNIT != "" and ( $!PRIORITY == "0" or $!PRIORITY == "1" or $!PRIORITY == "2" or $!PRIORITY == "3" ) and $!REDFISH_MESSAGE_ID == "") then {

# BAD   set $/bul_fname_err = "/var/log/redfish";
#   action(type="omfile" file=$/bul_fname_err template="SystemdUnitCriticalTemplate")

  action(type="omfile" file="/var/log/redfish" template="SystemdUnitCriticalTemplate")

# OK   action(type="omfile" dynafile="redfish_id" template="SystemdUnitCriticalTemplate")
}

# If the journal entry has a _SYSTEMD_UNIT!="" and not redfish, save as a LoggingTest event
if ($!_SYSTEMD_UNIT != "" and $!PRIORITY == "4" and $!REDFISH_MESSAGE_ID == "") then {

# BAD   set $/bul_fname_warn = "/var/log/redfish";
#   action(type="omfile" file=$/bul_fname_warn template="SystemdUnitWarningTemplate")

  action(type="omfile" file="/var/log/redfish" template="SystemdUnitWarningTemplate")

# OK   action(type="omfile" dynafile="redfish_id" template="SystemdUnitWarningTemplate")
}

# If the journal entry has a _SYSTEMD_UNIT!="" and not redfish, save as a LoggingTest event
if ($!_SYSTEMD_UNIT != "" and ( $!PRIORITY == "5" or $!PRIORITY == "6" or $!PRIORITY == "7" ) and $!REDFISH_MESSAGE_ID == "") then {

# BAD   set $/bul_fname_ok = "/var/log/redfish";
#   action(type="omfile" file=$/bul_fname_ok template="SystemdUnitInfoTemplate")

  action(type="omfile" file="/var/log/redfish" template="SystemdUnitInfoTemplate")

# OK   action(type="omfile" dynafile="redfish_id" template="SystemdUnitInfoTemplate")
}

#
# Include all config files in /etc/rsyslog.d/
#
$IncludeConfig /etc/rsyslog.d/*.conf
