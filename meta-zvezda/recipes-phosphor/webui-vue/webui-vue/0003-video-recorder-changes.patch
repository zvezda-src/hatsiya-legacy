diff -r -u --new-file a/src/locales/en-US.json b/src/locales/en-US.json
--- a/src/locales/en-US.json	2022-10-20 22:53:20.479775335 +0300
+++ b/src/locales/en-US.json	2022-10-21 01:08:21.595768206 +0300
@@ -20,7 +20,8 @@
       "reset": "Reset",
       "save": "Save",
       "saveSettings": "Save settings",
-      "selected": "Selected"
+      "selected": "Selected",
+      "start": "Start"
     },
     "ariaLabel": {
       "clearSearch": "Clear search input",
@@ -453,10 +454,22 @@
   "pageKvm": {
     "openNewTab": "Open in new tab",
     "buttonCtrlAltDelete": "Send Ctrl+Alt+Delete",
+    "buttonVideoRecordStart": "Start video record",
+    "buttonVideoRecordStop": "Stop video record",
+    "modal": {
+      "startVideoRecordingTitle": "Start video record",
+      "colorQuality": "Color quality",
+      "FPS": "Frames per second",
+      "timeOfPart": "Time of part (in seconds)",
+      "autoDownload": "Auto download"
+    },
     "status": "Status",
     "connected": "Connected",
     "connecting": "Connecting",
-    "disconnected": "Disconnected"
+    "disconnected": "Disconnected",
+    "toast": {
+      "invalidVideoParams": "Invalid video parameters are used."
+    }
   },
   "pageLdap": {
     "pageDescription": "Configure LDAP settings and manage role groups",
diff -r -u --new-file a/src/locales/ru-RU.json b/src/locales/ru-RU.json
--- a/src/locales/ru-RU.json	2022-10-20 22:53:20.479775335 +0300
+++ b/src/locales/ru-RU.json	2022-10-21 01:08:21.591768239 +0300
@@ -20,7 +20,8 @@
       "reset": "Сбросить",
       "save": "Сохранить",
       "saveSettings": "Сохранить настройки",
-      "selected": "Выбрано"
+      "selected": "Выбрано",
+      "start": "Старт"
     },
     "ariaLabel": {
       "clearSearch": "Очистить поле поиска",
@@ -451,10 +452,22 @@
   "pageKvm": {
     "openNewTab": "Открыть окно в новой вкладке",
     "buttonCtrlAltDelete": "Послать Ctrl+Alt+Delete",
+    "buttonVideoRecordStart": "Начать запись видео",
+    "buttonVideoRecordStop": "Завершить запись видео",
+    "modal": {
+      "startVideoRecordingTitle": "Начать запись видео",
+      "colorQuality": "Качество цветопередачи",
+      "FPS": "Кадров в секунду",
+      "timeOfPart": "Продолжительность одного интервала (в секундах)",
+      "autoDownload": "Автоматическое скачивание видео"
+    },
     "status": "Статус",
     "connected": "Подключено",
     "connecting": "Подключение",
-    "disconnected": "Отключено"
+    "disconnected": "Отключено",
+    "toast": {
+      "invalidVideoParams": "Выбраны недопустимые параметры записи видео."
+    }
   },
   "pageLdap": {
     "pageDescription": "Настройка параметров LDAP и управление группами",
diff -r -u --new-file a/src/store/index.js b/src/store/index.js
--- a/src/store/index.js	2022-10-20 22:53:20.479775335 +0300
+++ b/src/store/index.js	2022-10-21 01:08:21.615768040 +0300
@@ -30,6 +30,7 @@
 import PostCodeLogsStore from './modules/Logs/PostCodeLogsStore';
 import PoliciesStore from './modules/SecurityAndAccess/PoliciesStore';
 import FactoryResetStore from './modules/Operations/FactoryResetStore';
+import KvmConsoleStore from './modules/Operations/KvmConsoleStore';
 
 import WebSocketPlugin from './plugins/WebSocketPlugin';
 import DateTimeStore from './modules/Settings/DateTimeStore';
@@ -73,6 +74,7 @@
     virtualMedia: VirtualMediaStore,
     policies: PoliciesStore,
     factoryReset: FactoryResetStore,
+    kvmConsole: KvmConsoleStore,
   },
   plugins: [WebSocketPlugin],
 });
diff -r -u --new-file a/src/store/modules/Operations/KvmConsoleStore.js b/src/store/modules/Operations/KvmConsoleStore.js
--- a/src/store/modules/Operations/KvmConsoleStore.js	1970-01-01 03:00:00.000000000 +0300
+++ b/src/store/modules/Operations/KvmConsoleStore.js	2022-10-21 01:08:21.615768040 +0300
@@ -0,0 +1,67 @@
+import api from '@/store/api';
+import i18n from '@/i18n';
+
+const KvmConsoleStore = {
+  namespaced: true,
+  state: {
+    allVideoFiles: [],
+  },
+  getters: {
+    allVideoFiles: (state) => state.allVideoFiles,
+  },
+  mutations: {
+    setVideoFiles(state, videoFiles) {
+      state.allVideoFiles = videoFiles;
+    },
+  },
+  actions: {
+    async getVideoFiles({ commit }) {
+      return await api
+        .get('/kvm/video/list')
+        .then(({ data: { Members = [] } = {} }) => {
+          const videoFiles = Members.map((data) => {
+            const { File } = data;
+            return {
+              file: File,
+            };
+          });
+          commit('setVideoFiles', videoFiles);
+        })
+        .catch((error) => {
+          console.log('Video Files Data:', error);
+        });
+    },
+    async deleteVideoFile({ dispatch }, { video_file }) {
+      const loc = '/kvm/remove/video/' + video_file;
+      //console.log('loc=', loc);
+      return await api.delete(loc).then(() => dispatch('getVideoFiles'));
+    },
+    async clearVideoFileList({ dispatch }) {
+      const loc = '/kvm/video/list/clear';
+      //console.log('loc=', loc);
+      return await api.post(loc).then(() => dispatch('getVideoFiles'));
+    },
+    async startVideoRecording({ dispatch }, { colorQuality, timeOfPart, FPS }) {
+      const loc = '/kvm/video/start';
+      //console.log('loc=', loc);
+      return await api
+        .patch(loc, {
+          HighQuality: colorQuality == 'High',
+          TimeOfPart: timeOfPart,
+          FPS: FPS,
+        })
+        .then(() => dispatch('getVideoFiles'))
+        .catch((error) => {
+          console.log('error', error);
+          throw new Error(i18n.t('pageKvm.toast.invalidVideoParams'));
+        });
+    },
+    async stopVideoRecording({ dispatch }) {
+      const loc = '/kvm/video/stop';
+      //console.log('loc=', loc);
+      return await api.post(loc).then(() => dispatch('getVideoFiles'));
+    },
+  },
+};
+
+export default KvmConsoleStore;
diff -r -u --new-file a/src/views/Operations/Kvm/KvmConsole.vue b/src/views/Operations/Kvm/KvmConsole.vue
--- a/src/views/Operations/Kvm/KvmConsole.vue	2022-10-20 22:53:20.483775300 +0300
+++ b/src/views/Operations/Kvm/KvmConsole.vue	2022-10-21 01:08:21.595768206 +0300
@@ -19,6 +19,20 @@
             v-if="isConnected"
             variant="link"
             type="button"
+            @click="startStopVideoRecord()"
+          >
+            <icon-stop v-if="isVideoRecordStarted" />
+            <icon-recording v-if="!isVideoRecordStarted" />
+            {{
+              !isVideoRecordStarted
+                ? $t('pageKvm.buttonVideoRecordStart')
+                : $t('pageKvm.buttonVideoRecordStop')
+            }}
+          </b-button>
+          <b-button
+            v-if="isConnected"
+            variant="link"
+            type="button"
             @click="sendCtrlAltDel"
           >
             <icon-arrow-down />
@@ -35,17 +49,26 @@
           </b-button>
         </b-col>
       </b-row>
+      <modal-start-video-recording
+        :video-recording="modalStartVideoRecording"
+        @ok="onModalOk"
+      />
     </div>
     <div id="terminal-kvm" ref="panel" :class="terminalClass"></div>
   </div>
 </template>
 
 <script>
+import Axios from 'axios';
 import RFB from '@novnc/novnc/core/rfb';
 import StatusIcon from '@/components/Global/StatusIcon';
 import IconLaunch from '@carbon/icons-vue/es/launch/20';
 import IconArrowDown from '@carbon/icons-vue/es/arrow--down/16';
+import IconRecording from '@carbon/icons-vue/es/recording/20';
+import IconStop from '@carbon/icons-vue/es/stop/20';
 import { throttle } from 'lodash';
+import ModalStartVideoRecording from './ModalStartVideoRecording';
+import BVToastMixin from '@/components/Mixins/BVToastMixin';
 
 const Connecting = 0;
 const Connected = 1;
@@ -53,7 +76,15 @@
 
 export default {
   name: 'KvmConsole',
-  components: { StatusIcon, IconLaunch, IconArrowDown },
+  components: {
+    StatusIcon,
+    IconLaunch,
+    IconArrowDown,
+    IconRecording,
+    IconStop,
+    ModalStartVideoRecording,
+  },
+  mixins: [BVToastMixin],
   props: {
     isFullWindow: {
       type: Boolean,
@@ -69,6 +100,12 @@
       status: Connecting,
       convasRef: null,
       resizeKvmWindow: null,
+      timer: '',
+      url: `https://${window.location.host}/kvm/download/video/`,
+      downloadVideoInProgress: false,
+      isVideoRecordStarted: false,
+      modalStartVideoRecording: null,
+      autoDownload: true,
     };
   },
   computed: {
@@ -88,6 +125,12 @@
       }
       return this.$t('pageKvm.connecting');
     },
+    videoFiles() {
+      return this.$store.getters['kvmConsole/allVideoFiles'];
+    },
+  },
+  created() {
+    this.timer = setInterval(this.fetchVideoList, 10000);
   },
   mounted() {
     this.openTerminal();
@@ -95,6 +138,7 @@
   beforeDestroy() {
     window.removeEventListener('resize', this.resizeKvmWindow);
     this.closeTerminal();
+    this.cancelAutoUpdate();
   },
   methods: {
     sendCtrlAltDel() {
@@ -149,6 +193,132 @@
         'directories=no,titlebar=no,toolbar=no,location=no,status=no,menubar=no,scrollbars=no,resizable=yes,width=700,height=550'
       );
     },
+    forceFileDownload(response, video_file) {
+      const url = window.URL.createObjectURL(new Blob([response.data]));
+      const link = document.createElement('a');
+      link.href = url;
+      link.setAttribute('download', video_file); //or any other extension
+      document.body.appendChild(link);
+      link.click();
+    },
+    downloadWithVueResource(video_file) {
+      this.$http({
+        method: 'get',
+        url: this.url + video_file,
+        responseType: 'arraybuffer',
+      })
+        .then((response) => {
+          this.forceFileDownload(response, video_file);
+        })
+        .catch(() => console.log('error occured'))
+        .finally(() => {
+          //console.log('req done !!!');
+          this.$store.dispatch('kvmConsole/deleteVideoFile', {
+            video_file,
+          });
+        });
+    },
+    downloadWithAxios(video_file) {
+      Axios({
+        method: 'get',
+        url: this.url + video_file,
+        responseType: 'arraybuffer',
+      })
+        .then((response) => {
+          this.forceFileDownload(response, video_file);
+        })
+        .catch(() => console.log('error occured'))
+        .finally(() => {
+          //console.log('req done !!!');
+          this.$store.dispatch('kvmConsole/deleteVideoFile', {
+            video_file,
+          });
+        });
+    },
+    fetchVideoList1() {
+      //console.log('fetchVideoList ' + this.downloadVideoInProgress);
+      if (!this.downloadVideoInProgress) {
+        //console.log('start downloadWithVueResource');
+        this.downloadVideoInProgress = true;
+        //this.downloadWithVueResource('bmcweb');
+        this.downloadWithAxios('bmcweb');
+        this.downloadVideoInProgress = false;
+        //console.log('stop downloadWithVueResource');
+      }
+    },
+    fetchVideoList() {
+      //console.log('fetchVideoList ' + this.downloadVideoInProgress);
+      if (!this.downloadVideoInProgress) {
+        this.downloadVideoInProgress = true;
+
+        this.$store.dispatch('kvmConsole/getVideoFiles').finally(() => {
+          const t = this.videoFiles;
+          //console.info(t);
+          //console.log('t.length=', t.length);
+          if (t.length > 0) {
+            const video_file = t[0]['file'];
+            //console.log(video_file);
+            //console.log('start download');
+
+            //this.downloadWithVueResource(video_file);
+            this.downloadWithAxios(video_file);
+
+            //console.log('stop download');
+          }
+        });
+
+        this.downloadVideoInProgress = false;
+      }
+    },
+    cancelAutoUpdate() {
+      clearInterval(this.timer);
+      if (this.isVideoRecordStarted) {
+        this.$store.dispatch('kvmConsole/stopVideoRecording').finally(() => {
+          //console.log('stopVideoRecording done');
+          this.$store.dispatch('kvmConsole/clearVideoFileList').finally(() => {
+            //console.log('clearVideoFileList done');
+          });
+        });
+      }
+    },
+    initModaStartVideoRecording(startVideoRecording = null) {
+      this.modalStartVideoRecording = startVideoRecording;
+      this.$bvModal.show('start-video-recording');
+    },
+    startStopVideoRecord() {
+      //console.log('isVideoRecordStarted=', this.isVideoRecordStarted);
+      if (!this.isVideoRecordStarted) {
+        //console.log('start modal');
+        this.initModaStartVideoRecording(null);
+      } else {
+        this.$store.dispatch('kvmConsole/stopVideoRecording');
+        this.isVideoRecordStarted = false;
+        this.fetchVideoList();
+      }
+    },
+    onModalOk({ colorQuality, timeOfPart, FPS, autoDownload }) {
+      //console.log('colorQuality=', colorQuality);
+      //console.log('timeOfPart=', timeOfPart);
+      //console.log('FPS=', FPS);
+      //console.log('autoDownload=', autoDownload);
+
+      this.autoDownload = autoDownload;
+
+      this.$store
+        .dispatch('kvmConsole/startVideoRecording', {
+          colorQuality,
+          FPS,
+          timeOfPart,
+        })
+        .then(() => {
+          //console.log('start success');
+          this.isVideoRecordStarted = true;
+        })
+        .catch(({ message }) => this.errorToast(message))
+        .finally(() => {
+          //console.log('start done');
+        });
+    },
   },
 };
 </script>
diff -r -u --new-file a/src/views/Operations/Kvm/ModalStartVideoRecording.vue b/src/views/Operations/Kvm/ModalStartVideoRecording.vue
--- a/src/views/Operations/Kvm/ModalStartVideoRecording.vue	1970-01-01 03:00:00.000000000 +0300
+++ b/src/views/Operations/Kvm/ModalStartVideoRecording.vue	2022-10-21 01:08:21.595768206 +0300
@@ -0,0 +1,206 @@
+<template>
+  <b-modal
+    id="start-video-recording"
+    ref="modal"
+    @ok="onOk"
+    @hidden="resetForm"
+    @shown="fillForm"
+  >
+    <template #modal-title>
+      {{ $t('pageKvm.modal.startVideoRecordingTitle') }}
+    </template>
+    <b-form>
+      <b-form-group
+        :label="$t('pageKvm.modal.colorQuality')"
+        label-for="colorQuality"
+      >
+        <b-form-select
+          id="colorQuality"
+          v-model="form.colorQuality"
+          :options="colorQualityOptions"
+          :state="getValidationState($v.form.colorQuality)"
+          @input="$v.form.colorQuality.$touch()"
+        >
+        </b-form-select>
+        <b-form-invalid-feedback role="alert">
+          <template v-if="!$v.form.colorQuality.required">
+            {{ $t('global.form.fieldRequired') }}
+          </template>
+        </b-form-invalid-feedback>
+      </b-form-group>
+
+      <b-form-group
+        :label="$t('pageKvm.modal.autoDownload')"
+        label-for="autoDownload"
+      >
+        <b-form-select
+          id="autoDownload"
+          v-model="form.autoDownload"
+          :options="autoDownloadOptions"
+          :state="getValidationState($v.form.autoDownload)"
+          @input="$v.form.autoDownload.$touch()"
+        >
+        </b-form-select>
+        <b-form-invalid-feedback role="alert">
+          <template v-if="!$v.form.autoDownload.required">
+            {{ $t('global.form.fieldRequired') }}
+          </template>
+        </b-form-invalid-feedback>
+      </b-form-group>
+
+      <b-form-group :label="$t('pageKvm.modal.FPS')" label-for="FPS">
+        <b-form-input
+          id="FPS"
+          v-model="form.FPS"
+          type="number"
+          :state="getValidationState($v.form.FPS)"
+          @input="$v.form.FPS.$touch()"
+        />
+        <b-form-invalid-feedback role="alert">
+          <template v-if="!$v.form.FPS.required">
+            {{ $t('global.form.fieldRequired') }}
+          </template>
+        </b-form-invalid-feedback>
+      </b-form-group>
+
+      <b-form-group
+        :label="$t('pageKvm.modal.timeOfPart')"
+        label-for="timeOfPart"
+      >
+        <b-form-input
+          id="timeOfPart"
+          v-model="form.timeOfPart"
+          type="number"
+          :state="getValidationState($v.form.timeOfPart)"
+          @input="$v.form.timeOfPart.$touch()"
+        />
+        <b-form-invalid-feedback role="alert">
+          <template v-if="!$v.form.timeOfPart.required">
+            {{ $t('global.form.fieldRequired') }}
+          </template>
+        </b-form-invalid-feedback>
+      </b-form-group>
+    </b-form>
+    <template #modal-ok>
+      {{ $t('global.action.start') }}
+    </template>
+    <template #modal-cancel>
+      {{ $t('global.action.cancel') }}
+    </template>
+  </b-modal>
+</template>
+
+<script>
+//import { required, ipAddress, requiredIf } from 'vuelidate/lib/validators';
+import { required } from 'vuelidate/lib/validators';
+import VuelidateMixin from '@/components/Mixins/VuelidateMixin.js';
+
+export default {
+  mixins: [VuelidateMixin],
+  props: {
+    videoRecording: {
+      type: Object,
+      default: null,
+      validator: (prop) => {
+        if (prop === null) return true;
+        return (
+          Object.prototype.hasOwnProperty.call(prop, 'colorQuality') &&
+          Object.prototype.hasOwnProperty.call(prop, 'timeOfPart') &&
+          Object.prototype.hasOwnProperty.call(prop, 'FPS') &&
+          Object.prototype.hasOwnProperty.call(prop, 'autoDownload')
+        );
+      },
+    },
+  },
+  data() {
+    return {
+      form: {
+        colorQuality: null,
+        timeOfPart: null,
+        FPS: null,
+        autoDownload: null,
+      },
+    };
+  },
+  computed: {
+    colorQualityOptions() {
+      return [
+        { text: 'Normal', value: 'Normal' },
+        //{ text: 'High', value: 'High' },
+      ];
+    },
+    autoDownloadOptions() {
+      return [
+        { text: 'Enable', value: 'Enable' },
+        //{ text: 'Disable', value: 'Disable' },
+      ];
+    },
+  },
+  validations() {
+    return {
+      form: {
+        colorQuality: {
+          required,
+        },
+        timeOfPart: {
+          required,
+        },
+        FPS: {
+          required,
+        },
+        autoDownload: {
+          required,
+        },
+      },
+    };
+  },
+  methods: {
+    handleSubmit() {
+      this.$v.$touch();
+      if (this.$v.$invalid) return;
+      const FPS = Number(this.form.FPS);
+      if (this.form.FPS.length > 5 || FPS < 1 || FPS > 30) return;
+      const timeOfPart = Number(this.form.timeOfPart);
+      if (
+        this.form.timeOfPart.length > 5 ||
+        timeOfPart < 10 ||
+        timeOfPart > 600
+      )
+        return;
+      this.$emit('ok', {
+        colorQuality: this.form.colorQuality,
+        timeOfPart: timeOfPart,
+        FPS: FPS,
+        autoDownload: this.form.autoDownload,
+      });
+      this.closeModal();
+    },
+    closeModal() {
+      this.$nextTick(() => {
+        this.$refs.modal.hide();
+      });
+    },
+    resetForm() {
+      this.$v.$reset();
+    },
+    fillForm() {
+      if (this.videoRecording) {
+        this.form.colorQuality = this.videoRecording.colorQuality;
+        this.form.timeOfPart = this.videoRecording.timeOfPart;
+        this.form.FPS = this.videoRecording.FPS.toString();
+        this.form.autoDownload = this.videoRecording.autoDownload;
+      } else {
+        this.form.colorQuality = this.colorQualityOptions[0].value;
+        this.form.timeOfPart = '60';
+        this.form.FPS = '5';
+        this.form.autoDownload = this.autoDownloadOptions[0].value;
+      }
+    },
+    onOk(bvModalEvt) {
+      // prevent modal close
+      bvModalEvt.preventDefault();
+      this.handleSubmit();
+    },
+  },
+};
+</script>
